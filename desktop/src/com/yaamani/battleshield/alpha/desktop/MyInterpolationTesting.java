package com.yaamani.battleshield.alpha.desktop;

import com.yaamani.battleshield.alpha.MyEngine.MyInterpolation;

public class MyInterpolationTesting {

    // [0] --> input testing value, [1] --> correct output of [0], [2] --> input testing value, [3] --> correct output of [2], .......

    private static double[] expInApplyTestingValues = {0, 0, 0.1, 7.80134161278074e-5, 0.2, 0.000290075867564040, 0.30000000000000004, 0.000866521375801630, 0.4, 0.00243346272594071, 0.5, 0.00669285092428486, 0.6, 0.0182710684641967, 0.7, 0.0497439268088847, 0.7999999999999999, 0.135296025736916, 0.8999999999999999, 0.367850741639513, 0.9999999999999999, 0.999999999999998};
    private static double[] expInSlopeAtTestingValues = {0, 0.0004540199, 0.1, 0.001234154, 0.2, 0.003354779, 0.30000000000000004, 0.009119234, 0.4, 0.02478865, 0.5, 0.06738253, 0.6, 0.1831647, 0.7, 0.4978933, 0.7999999999999999, 1.353414, 0.8999999999999999, 3.678961, 0.9999999999999999, 10.00045};
    private static double[] expInInverseFunctionTestingValues = {0, 0, 0.1, 0.7697823, 0.2, 0.8390744, 0.30000000000000004, 0.8796133, 0.4, 0.9083777, 0.5, 0.9306898, 0.6, 0.9489205, 0.7, 0.9643345, 0.7999999999999999, 0.9776868, 0.8999999999999999, 0.9894645, 0.9999999999999999, 1.000000};



    private static double[] expOutApplyTestingValues = {0, 0, 0.1, 0.6321493, 0.2, 0.8647040, 0.30000000000000004, 0.9502561, 0.4, 0.9817289, 0.5, 0.9933072, 0.6, 0.9975665, 0.7, 0.9991335, 0.7999999999999999, 0.9997099, 0.8999999999999999, 0.9999220, 0.9999999999999999, 1.000000};
    private static double[] expOutSlopeAtTestingValues ={0, 10.00045, 0.1, 3.678961, 0.2, 1.353414, 0.30000000000000004, 0.4978933, 0.4, 0.1831647, 0.5, 0.06738253, 0.6, 0.02478865, 0.7, 0.009119234, 0.7999999999999999, 0.003354779, 0.8999999999999999, 0.001234154, 0.9999999999999999, 0.0004540199};
    private static double[] expOutInverseFunctionTestingValues = {0, 0, 0.1, 0.01053555, 0.2, 0.02231322, 0.30000000000000004, 0.03566555, 0.4, 0.05107954, 0.5, 0.06931018, 0.6, 0.09162226, 0.7, 0.1203867, 0.7999999999999999, 0.1609256, 0.8999999999999999, 0.2302177, 0.9999999999999999, 1.000000};



    private static double[] expInOutApplyTestingValues = {0, 0, 0.1, 0.000145037933782020, 0.2, 0.00121673136297036, 0.30000000000000004, 0.00913553423209834, 0.4, 0.0676480128684579, 0.5, 0.500000000000000, 0.6, 0.932351987131542, 0.7, 0.990864465767902, 0.7999999999999999, 0.998783268637030, 0.8999999999999999, 0.999854962066218, 0.9999999999999999, 1.00000000000000};
    private static double[] expInOutSlopeAtTestingValues = {0, 0.000454019910096878, 0.1, 0.00335477858573728, 0.2, 0.0247886471695040, 0.30000000000000004, 0.183164704552064, 0.4, 1.35341427727926, 0.5, 10.0004540199101, 0.6, 1.35341427727926, 0.7, 0.183164704552063, 0.7999999999999999, 0.0247886471695040, 0.8999999999999999, 0.00335477858573728, 0.9999999999999999, 0.000454019910096879};
    private static double[] expInOutInverseFunctionTestingValues = {0, 0, 0.1, 0.419537183539886, 0.2, 0.454188868285090, 0.30000000000000004, 0.474460232119791, 0.4, 0.488843389930191, 0.5, 0.500000000000000, 0.6, 0.511156610069809, 0.7, 0.525539767880209, 0.7999999999999999, 0.545811131714910, 0.8999999999999999, 0.580462816460114, 0.9999999999999999, 0.999999999999755};



    private static double[] expInXyApplyTestingValues = {-10, 30.0000000000000, 81.0, 30.0756730136440, 172.0, 30.2813735915371, 263.0, 30.8405257345276, 354.0, 32.3604588441625, 445.0, 36.4920653965563, 536.0, 47.7229364102708, 627.0, 78.2516090046181, 718.0, 161.237144964808, 809.0, 386.815219390328, 900.0, 1000.00000000000};
    private static double[] expInXySlopeAtTestingValues = {-10, 0.000483955288784584, 81.0, 0.00131552686728978, 172.0, 0.00357597277820347, 263.0, 0.00972050182205471, 354.0, 0.0264230634663944, 445.0, 0.0718253332729199, 536.0, 0.195241498258793, 627.0, 0.530721416877995, 718.0, 1.44265038347349, 809.0, 3.92153032221547, 900.0, 10.6598246146294};
    private static double[] expInXyInverseFunctionTestingValues = {81.0, 632.036605729152, 172.0, 725.170406645311, 263.0, 770.223623800336, 354.0, 800.221954342828, 445.0, 822.744927783757, 536.0, 840.784682791645, 627.0, 855.833096031825, 718.0, 868.742535120897, 809.0, 880.046075622770, 900.0, 890.099414625349};



    private static double[] pow2InApplyTestingValues = {0, 0, 0.1, 0.0100000000000000, 0.2, 0.0400000000000000, 0.30000000000000004, 0.0900000000000000, 0.4, 0.160000000000000, 0.5, 0.250000000000000, 0.6, 0.360000000000000, 0.7, 0.490000000000000, 0.7999999999999999, 0.640000000000000, 0.8999999999999999, 0.810000000000000, 0.9999999999999999, 1.00000000000000};
    private static double[] pow2InSlopeAtTestingValues = {0, 0, 0.1, 0.200000000000000, 0.2, 0.400000000000000, 0.30000000000000004, 0.600000000000000, 0.4, 0.800000000000000, 0.5, 1.00000000000000, 0.6, 1.20000000000000, 0.7, 1.40000000000000, 0.7999999999999999, 1.60000000000000, 0.8999999999999999, 1.80000000000000, 0.9999999999999999, 2.00000000000000};
    private static double[] pow2InInverseFunctionTestingValues = {0, 0, 0.1, 0.316227766016838, 0.2, 0.447213595499958, 0.30000000000000004, 0.547722557505166, 0.4, 0.632455532033676, 0.5, 0.707106781186548, 0.6, 0.774596669241483, 0.7, 0.836660026534076, 0.7999999999999999, 0.894427190999916, 0.8999999999999999, 0.948683298050514, 0.9999999999999999, 1.00000000000000};



    private static double[] pow2OutApplyTestingValues = {0, 0, 0.1, 0.190000000000000, 0.2, 0.360000000000000, 0.30000000000000004, 0.510000000000000, 0.4, 0.640000000000000, 0.5, 0.750000000000000, 0.6, 0.840000000000000, 0.7, 0.910000000000000, 0.7999999999999999, 0.960000000000000, 0.8999999999999999, 0.990000000000000, 0.9999999999999999, 1.00000000000000};
    private static double[] pow2OutSlopeAtTestingValues = {0, 2.00000000000000, 0.1, 1.80000000000000, 0.2, 1.60000000000000, 0.30000000000000004, 1.40000000000000, 0.4, 1.20000000000000, 0.5, 1.00000000000000, 0.6, 0.800000000000000, 0.7, 0.600000000000000, 0.7999999999999999, 0.400000000000000, 0.8999999999999999, 0.200000000000000, 0.9999999999999999, 2.22044604925031e-16};
    private static double[] pow2OutInverseFunctionTestingValues ={0, 0, 0.1, 0.0513167019494862, 0.2, 0.105572809000084, 0.30000000000000004, 0.163339973465924, 0.4, 0.225403330758517, 0.5, 0.292893218813452, 0.6, 0.367544467966324, 0.7, 0.452277442494834, 0.7999999999999999, 0.552786404500042, 0.8999999999999999, 0.683772233983162, 0.9999999999999999, 0.999999989463288};


    private static double[] pow3InApplyTestingValues = {0, 0, 0.1, 0.00100000000000000, 0.2, 0.00800000000000000, 0.30000000000000004, 0.0270000000000000, 0.4, 0.0640000000000000, 0.5, 0.125000000000000, 0.6, 0.216000000000000, 0.7, 0.343000000000000, 0.7999999999999999, 0.512000000000000, 0.8999999999999999, 0.729000000000000, 0.9999999999999999, 1.00000000000000};
    private static double[] pow3InSlopeAtTestingValues = {0, 0, 0.1, 0.0300000000000000, 0.2, 0.120000000000000, 0.30000000000000004, 0.270000000000000, 0.4, 0.480000000000000, 0.5, 0.750000000000000, 0.6, 1.08000000000000, 0.7, 1.47000000000000, 0.7999999999999999, 1.92000000000000, 0.8999999999999999, 2.43000000000000, 0.9999999999999999, 3.00000000000000};
    private static double[] pow3InInverseFunctionTestingValues ={0, 0, 0.1, 0.464158883361278, 0.2, 0.584803547642573, 0.30000000000000004, 0.669432950082170, 0.4, 0.736806299728077, 0.5, 0.793700525984100, 0.6, 0.843432665301749, 0.7, 0.887904001742601, 0.7999999999999999, 0.928317766722556, 0.8999999999999999, 0.965489384605630, 0.9999999999999999, 1.00000000000000};


    private static double[] pow3OutApplyTestingValues = {0, 0, 0.1, 0.271000000000000, 0.2, 0.488000000000000, 0.30000000000000004, 0.657000000000000, 0.4, 0.784000000000000, 0.5, 0.875000000000000, 0.6, 0.936000000000000, 0.7, 0.973000000000000, 0.7999999999999999, 0.992000000000000, 0.8999999999999999, 0.999000000000000, 0.9999999999999999, 1.00000000000000};
    private static double[] pow3OutSlopeAtTestingValues = {0, 3.00000000000000, 0.1, 2.43000000000000, 0.2, 1.92000000000000, 0.30000000000000004, 1.47000000000000, 0.4, 1.08000000000000, 0.5, 0.750000000000000, 0.6, 0.480000000000000, 0.7, 0.270000000000000, 0.7999999999999999, 0.120000000000000, 0.8999999999999999, 0.0300000000000001, 0.9999999999999999, 3.69778549322349e-32};
    private static double[] pow3OutInverseFunctionTestingValues ={0, 0, 0.1, 0.0345106153944, 0.2, 0.0716822332774, 0.3, 0.112095998257, 0.4, 0.156567334698, 0.5, 0.206299474016, 0.6, 0.263193700272, 0.7, 0.330567049918, 0.8, 0.415196452357, 0.9, 0.535841116639, 1, 1};


    private static double[] sineInApplyTestingValues = {0, 0, 0.1, 0.0123116594048623, 0.2, 0.0489434837048464, 0.30000000000000004, 0.108993475811632, 0.4, 0.190983005625053, 0.5, 0.292893218813452, 0.6, 0.412214747707527, 0.7, 0.546009500260453, 0.7999999999999999, 0.690983005625052, 0.8999999999999999, 0.843565534959769, 0.9999999999999999, 1.00000000000000};
    private static double[] sineInSlopeAtTestingValues = {0, 0, 0.1, 0.245726683069319, 0.2, 0.485402759681367, 0.30000000000000004, 0.713126609390660, 0.4, 0.923290915245228, 0.5, 1.11072073453959, 0.6, 1.27080092307881, 0.7, 1.39958977534538, 0.7999999999999999, 1.49391608237078, 0.8999999999999999, 1.55145721742499, 0.9999999999999999, 1.57079632679490};
    private static double[] sineInInverseFunctionTestingValues = {0, 0, 0.1, 0.287132586257413, 0.2, 0.409665529398267, 0.30000000000000004, 0.506366622213270, 0.4, 0.590334470601733, 0.5, 0.666666666666667, 0.6, 0.738020239131091, 0.7, 0.806026631958643, 0.7999999999999999, 0.871811566302050, 0.8999999999999999, 0.936231439141480, 0.9999999999999999, 1.00000000000000};


    private static double[] sineOutApplyTestingValues = {0, 0, 0.1, 0.156434465040231, 0.2, 0.309016994374947, 0.30000000000000004, 0.453990499739547, 0.4, 0.587785252292473, 0.5, 0.707106781186548, 0.6, 0.809016994374947, 0.7, 0.891006524188368, 0.7999999999999999, 0.951056516295154, 0.8999999999999999, 0.987688340595138, 0.9999999999999999, 1.00000000000000};
    private static double[] sineOutSlopeAtTestingValues = {0, 1.57079632679490, 0.1, 1.55145721742499, 0.2, 1.49391608237078, 0.30000000000000004, 1.39958977534538, 0.4, 1.27080092307881, 0.5, 1.11072073453959, 0.6, 0.923290915245228, 0.7, 0.713126609390660, 0.7999999999999999, 0.485402759681367, 0.8999999999999999, 0.245726683069320, 0.9999999999999999, 2.73936551250780e-16};
    private static double[] sineOutInverseFunctionTestingValues = {0, 0, 0.1, 0.0637685608585199, 0.2, 0.128188433697950, 0.30000000000000004, 0.193973368041357, 0.4, 0.261979760868909, 0.5, 0.333333333333333, 0.6, 0.409665529398267, 0.7, 0.493633377786730, 0.7999999999999999, 0.590334470601733, 0.8999999999999999, 0.712867413742587, 0.9999999999999999, 0.999999990513626};



    /*private static double[] circleInApplyTestingValues = {0, 0, 0.1, 0.00501256289338003, 0.2, 0.0202041028867288, 0.30000000000000004, 0.0460607985830543, 0.4, 0.0834848610088320, 0.5, 0.133974596215561, 0.6, 0.200000000000000, 0.7, 0.285857157145715, 0.7999999999999999, 0.400000000000000, 0.8999999999999999, 0.564110105645932, 0.9999999999999999, 0.999999985098839};
    private static double[] circleInSlopeAtTestingValues = {0, 0, 0.1, 0.100503781525921, 0.2, 0.204124145231932, 0.30000000000000004, 0.314485451016576, 0.4, 0.436435780471985, 0.5, 0.577350269189626, 0.6, 0.750000000000000, 0.7, 0.980196058819607, 0.7999999999999999, 1.33333333333333, 0.8999999999999999, 2.06474160483505, 0.9999999999999999, 67108864.0000000};
    private static double[] circleInInverseFunctionTestingValues = {0, 0, 0.1, 0.435889894354067, 0.2, 0.600000000000000, 0.30000000000000004, 0.714142842854285, 0.4, 0.800000000000000, 0.5, 0.866025403784439, 0.6, 0.916515138991168, 0.7, 0.953939201416946, 0.7999999999999999, 0.979795897113271, 0.8999999999999999, 0.994987437106620, 0.9999999999999999, 1.00000000000000};



    private static double[] circleOutApplyTestingValues = {0, 0, 0.1, 0.435889894354067, 0.2, 0.600000000000000, 0.30000000000000004, 0.714142842854285, 0.4, 0.800000000000000, 0.5, 0.866025403784439, 0.6, 0.916515138991168, 0.7, 0.953939201416946, 0.7999999999999999, 0.979795897113271, 0.8999999999999999, 0.994987437106620, 0.9999999999999999, 1.00000000000000};
    private static double[] circleOutSlopeAtTestingValues = {0, Double.MAX_VALUE, 0.1, 2.06474160483506, 0.2, 1.33333333333333, 0.30000000000000004, 0.980196058819607, 0.4, 0.750000000000000, 0.5, 0.577350269189626, 0.6, 0.436435780471985, 0.7, 0.314485451016576, 0.7999999999999999, 0.204124145231932, 0.8999999999999999, 0.100503781525921, 0.9999999999999999, 1.11022302462516e-16};
    private static double[] circleOutInverseFunctionTestingValues = {0, 0, 0.1, 0.00501256289338003, 0.2, 0.0202041028867288, 0.30000000000000004, 0.0460607985830543, 0.4, 0.0834848610088320, 0.5, 0.133974596215561, 0.6, 0.200000000000000, 0.7, 0.285857157145715, 0.7999999999999999, 0.400000000000000, 0.8999999999999999, 0.564110105645932, 0.9999999999999999, 0.999999985098839};


    private static double[] circleInOutApplyTestingValues = {0, 0, 0.1, 0.0101020514433644, 0.2, 0.0417424305044160, 0.30000000000000004, 0.100000000000000, 0.4, 0.200000000000000, 0.5, 0.500000000000000, 0.6, 0.800000000000000, 0.7, 0.900000000000000, 0.7999999999999999, 0.958257569495584, 0.8999999999999999, 0.989897948556636, 0.9999999999999999, 1.00000000000000};
    private static double[] circleInOutSlopeAtTestingValues = {0, 0, 0.1, 0.204124145231932, 0.2, 0.436435780471985, 0.30000000000000004, 0.750000000000000, 0.4, 1.33333333333333, 0.5, Double.MAX_VALUE, 0.6, 1.33333333333333, 0.7, 0.750000000000000, 0.7999999999999999, 0.436435780471985, 0.8999999999999999, 0.204124145231932, 0.9999999999999999, 2.22044604925031e-16};
    private static double[] circleInOutInverseFunctionTestingValues = {0, 0, 0.1, 0.300000000000000, 0.2, 0.400000000000000, 0.30000000000000004, 0.458257569495584, 0.4, 0.489897948556636, 0.5, 0.500000000000000, 0.6, 0.510102051443364, 0.7, 0.541742430504416, 0.7999999999999999, 0.600000000000000, 0.8999999999999999, 0.700000000000000, 0.9999999999999999, 0.999999989463288};*/








    public static void main(String[] args) {
        System.out.println("---------------------------------- myExp10In ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myExp10In, expInApplyTestingValues, expInSlopeAtTestingValues, expInInverseFunctionTestingValues, 0, 1, 0, 1);
        System.out.println("---------------------------------- myExp10Out ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myExp10Out, expOutApplyTestingValues, expOutSlopeAtTestingValues, expOutInverseFunctionTestingValues, 0, 1, 0, 1);
        System.out.println("---------------------------------- myExp10 ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myExp10, expInOutApplyTestingValues, expInOutSlopeAtTestingValues, expInOutInverseFunctionTestingValues, 0, 1, 0, 1);


        System.out.println("---------------------------------- myExp10InXy ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myExp10In, expInXyApplyTestingValues, expInXySlopeAtTestingValues, expInXyInverseFunctionTestingValues, -10, 900, 30, 1000);



        /*System.out.println("---------------------------------- myCircleIn ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myCircleIn, circleInApplyTestingValues, circleInSlopeAtTestingValues, circleInInverseFunctionTestingValues);
        System.out.println("---------------------------------- myCircleOut ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myCircleOut, circleOutApplyTestingValues, circleOutSlopeAtTestingValues, circleOutInverseFunctionTestingValues);
        System.out.println("---------------------------------- myCircle ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myCircle, circleInOutApplyTestingValues, circleInOutSlopeAtTestingValues, circleInOutInverseFunctionTestingValues);*/




        System.out.println("---------------------------------- myPow2In ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myPow2In, pow2InApplyTestingValues, pow2InSlopeAtTestingValues, pow2InInverseFunctionTestingValues, 0, 1, 0, 1);
        System.out.println("---------------------------------- myPow2Out ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myPow2Out, pow2OutApplyTestingValues, pow2OutSlopeAtTestingValues, pow2OutInverseFunctionTestingValues, 0, 1, 0, 1);


        System.out.println("---------------------------------- myPow3In ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myPow3In, pow3InApplyTestingValues, pow3InSlopeAtTestingValues, pow3InInverseFunctionTestingValues, 0, 1, 0, 1);
        System.out.println("---------------------------------- myPow3Out ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.myPow3Out, pow3OutApplyTestingValues, pow3OutSlopeAtTestingValues, pow3OutInverseFunctionTestingValues, 0, 1, 0, 1);


        System.out.println("---------------------------------- mySineIn ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.mySineIn, sineInApplyTestingValues, sineInSlopeAtTestingValues, sineInInverseFunctionTestingValues, 0, 1, 0, 1);
        System.out.println("---------------------------------- mySineOut ----------------------------------");
        testApplySlopeAtInverseFunction(MyInterpolation.mySineOut, sineOutApplyTestingValues, sineOutSlopeAtTestingValues, sineOutInverseFunctionTestingValues, 0, 1, 0, 1);


    }








    private static void testApplySlopeAtInverseFunction(MyInterpolation myInterpolation,
                                                        double[] applyTestingValues,
                                                        double[] slopeAtTestingValues,
                                                        double[] inverseFunctionTestingValues,
                                                        float startX,
                                                        float endX,
                                                        float startY,
                                                        float endY) {
        float input, correctOutput, output;

        System.out.println("------ apply ------");
        for (int i = 0; i < applyTestingValues.length; i+=2) {
            input = (float) applyTestingValues[i];
            correctOutput = (float) applyTestingValues[i+1];
            output = myInterpolation.apply(startX, endX, startY, endY, input);
            System.out.println(input + ", " + output + ", " + correctOutput);
        }

        System.out.println("\n------ slopeAt ------");
        for (int i = 0; i < slopeAtTestingValues.length; i+=2) {
            input = (float) slopeAtTestingValues[i];
            correctOutput = (float) slopeAtTestingValues[i+1];
            output = myInterpolation.slopeAt(startX, endX, startY, endY, input);
            System.out.println(input + ", " + output + ", " + correctOutput);
        }

        System.out.println("\n------ inverseFunction ------");
        for (int i = 0; i < inverseFunctionTestingValues.length; i+=2) {
            input = (float) inverseFunctionTestingValues[i];
            correctOutput = (float) inverseFunctionTestingValues[i+1];
            output = myInterpolation.inverseFunction(startX, endX, startY, endY, input);
            System.out.println(input + ", " + output + ", " + correctOutput);
        }
    }
}